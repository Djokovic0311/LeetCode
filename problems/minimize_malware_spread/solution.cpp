class Solution {
public:
    vector<int> parents, size;
    int find_set(int v) {
        if(parents[v] == v) return v;
        else return parents[v] = find_set(parents[v]);
    }   
    void union_set(int a, int b) {
        a = find_set(a);
        b = find_set(b);
        if(a == b) return;
        if(size[a] < size[b]) {
            parents[a] = b;
            size[b] += size[a];
        } else {
            parents[b] = a;
            size[a] += size[b];
        }
        return;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for(int i = 0; i < n; i++) {
            parents.push_back(i);
            size.push_back(1);
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(i == j)
                    continue;
                if(graph[i][j] == 0)
                    continue;
                union_set(i, j);
            }
        }
        int isz = initial.size();
        vector<int> con(n);
        for(int ini : initial) {
            int pr = find_set(ini);
            con[pr]++;
        }
        int ans = -1, mxsz = -1;
        for(int ini : initial) {
            int pr = find_set(ini);
            if(con[pr] == 1) {
                if(mxsz == size[pr]) {
                    ans = min(ans, ini);
                } else if(mxsz < size[pr]) {
                    ans = ini;
                    mxsz = size[pr];
                }
            } 
        }

        if(ans != -1) 
            return ans;
        ans = INT_MAX;
        for(int ini : initial) {
            ans = min(ini, ans);
        }

        return ans;
    }
};